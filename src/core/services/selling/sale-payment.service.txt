import { Inject, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { FindOptionsWhere, Repository } from 'typeorm';
import { PaginatedService } from '@app/typeorm';
import { REQUEST } from '@nestjs/core';
import { AbstractService } from '../abstract.service';
import { SalePayment } from '../../entities/selling/sale-payment.entity';
import { SalePaymentPrintingHistory } from '../../entities/selling/sale-payment-printing-history.entity';

@Injectable()
export class SalePaymentService extends AbstractService<SalePayment> {
  public NOT_FOUND_MESSAGE = `Paiement non trouv√©`;

  constructor(
    @InjectRepository(SalePayment)
    private _repository: Repository<SalePayment>,
    protected paginatedService: PaginatedService<SalePayment>,
    @Inject(REQUEST) protected request: any,
  ) {
    super();
  }

  get repository(): Repository<SalePayment> {
    return this._repository;
  }

  async printRecord(
    optionsWhere: FindOptionsWhere<SalePayment>,
  ): Promise<SalePayment> {
    const salePayment = await this.readOneRecord({
      where: optionsWhere,
      relations: { printingHistories: true },
    });
    const authUser = await super.checkSessionBranch();
    salePayment.printingActorId = authUser?.id;
    salePayment.printingHistories.push(
      SalePaymentPrintingHistory.create({ createdById: authUser?.id }),
    );
    return this.repository.save(salePayment);
  }
}
